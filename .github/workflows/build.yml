on:
  pull_request:
    types: [opened, synchronize]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  check-docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # restore exec-commands and check-links
      - uses: actions/cache@v3
        id: cache-check-docs
        with:
          path: |
            ~/.cargo/bin/
          key: check-docs

      # install exec-commands and check-links in ~/.cargo/bin when the cache is not available
      - if: steps.cache-check-docs.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - if: steps.cache-check-docs.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --git https://github.com/ocxtal/exec-commands.git
      - if: steps.cache-check-docs.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --git https://github.com/epwalsh/check-links.git
      - if: steps.cache-check-docs.outputs.cache-hit != 'true'
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-msrv

      # check if *.md files have changed from master
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            md:
              - '*.md'
              - '**/*.md'

      # if they have any change, build nd for use in sanity check of examples
      - if: steps.changes.outputs.md == 'true'
        uses: actions-rs/cargo@v1
        name: cargo build
        with:
          command: build

      # check examples and links
      - if: steps.changes.outputs.md == 'true'
        run: exec-commands --diff
      - if: steps.changes.outputs.md == 'true'
        run: check-links --timeout 20

  nightly-x86_64-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # restore toolchain and previoud build
      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
            target/
          key: nightly-x86_64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}

      # install toolchain when the cache is not available
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: rustup component add rustfmt clippy

      # fmt -> clippy -> test
      - uses: actions-rs/cargo@v1
        name: cargo fmt
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1
        name: cargo clippy
        with:
          command: clippy
          args: --no-deps -- -D warnings
        env:
          RUSTFLAGS: '-C target-cpu=x86-64-v3'
      - uses: actions-rs/cargo@v1
        name: cargo test
        with:
          command: test
        env:
          RUSTFLAGS: '-C target-cpu=x86-64-v3'

  nightly-aarch64-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # restore toolchain and previoud build
      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
            target/
          key: nightly-aarch64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}

      # install toolchain when the cache is not available
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          target: aarch64-unknown-linux-gnu
          override: true
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: rustup component add clippy

      # clippy -> test (fmt skipped for aarch64)
      - uses: actions-rs/cargo@v1
        name: cargo clippy
        with:
          use-cross: true
          command: clippy
          args: --no-deps --target aarch64-unknown-linux-gnu -- -D warnings
      - uses: actions-rs/cargo@v1
        name: cargo test
        with:
          use-cross: true
          command: test
          args: --target aarch64-unknown-linux-gnu

  stable-x86_64-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # restore toolchain and previoud build
      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
            target/
          key: stable-x86_64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}

      # install toolchain when the cache is not available
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: rustup component add rustfmt clippy

      # fmt -> clippy -> test
      - uses: actions-rs/cargo@v1
        name: cargo fmt --all -- --check
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1
        name: cargo clippy
        with:
          command: clippy
          args: --no-deps -- -D warnings -A unknown-lints
        env:
          RUSTFLAGS: '-C target-cpu=x86-64-v3'
      - uses: actions-rs/cargo@v1
        name: cargo test
        with:
          command: test
        env:
          RUSTFLAGS: '-C target-cpu=x86-64-v3'

  stable-aarch64-unknown-linux-gnu:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # restore toolchain and previoud build
      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
            target/
          key: stable-aarch64-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}

      # install toolchain when the cache is not available
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: aarch64-unknown-linux-gnu
          override: true
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        run: rustup component add clippy

      # clippy -> test (fmt skipped for aarch64)
      - uses: actions-rs/cargo@v1
        name: cargo clippy
        with:
          use-cross: true
          command: clippy
          args: --no-deps --target aarch64-unknown-linux-gnu -- -D warnings -A unknown-lints
      - uses: actions-rs/cargo@v1
        name: cargo test
        with:
          use-cross: true
          command: test
          args: --target aarch64-unknown-linux-gnu
