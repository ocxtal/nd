on:
  pull_request:
    types: [opened, synchronize]
  schedule:
    - cron: '0 0 * * 0'
  workflow_dispatch:

jobs:
  check-docs:
    runs-on: ubuntu-22.04
    steps:
      - name: "Setup PATH"
        run: echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV

      # checkout repository
      - uses: actions/checkout@v3

      # restore exec-commands and check-links
      - uses: actions/cache@v3
        id: cache-check-docs
        with:
          path: |
            ~/.cargo/bin/
          key: check-docs

      # install exec-commands and check-links in ~/.cargo/bin when the cache is not available
      - if: steps.cache-check-docs.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - if: steps.cache-check-docs.outputs.cache-hit != 'true'
        name: "Install tools"
        run: |
          cargo install cargo-msrv    --git https://github.com/foresterre/cargo-msrv.git
          cargo install exec-commands --git https://github.com/ocxtal/exec-commands.git
          cargo install check-links   --git https://github.com/epwalsh/check-links.git

      # check if *.md files have changed from master
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            md:
              - '*.md'
              - '**/*.md'

      # determine MSRV before running exec-commands
      - if: steps.changes.outputs.md == 'true'
        name: "Determine MSRV"
        run: |
          cargo-msrv --log-target=stdout --log-level=debug
          cargo-msrv --output-format=minimal > msrv.txt

      # rebuild nd for use in sanity check of examples; then check examples and links
      - if: steps.changes.outputs.md == 'true'
        name: "Scan markdown files"
        run: |
          cargo build --debug
          exec-commands --diff
          check-links --timeout 20

  cargo-test-all:
    runs-on: ubuntu-22.04

    strategy:
      matrix:
        arch: ["aarch64", "x86_64"]
        toolchain: ["nightly", "stable"]

    steps:
      - name: "Setup PATH"
        run: echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV

      # print info; for debugging
      - name: "Print target information"
        run: |
          echo "arch: ${{ matrix.arch }}"
          echo "toolchain: ${{ matrix.toolchain }}"
          echo "target triple: ${{ matrix.toolchain }}-${{ matrix.arch }}-unknown-linux-gnu"

      # checkout repository
      - uses: actions/checkout@v3

      # restore toolchain and previoud build
      - uses: actions/cache@v3
        id: cache-cargo
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.rustup/
            target/
          key: ${{ matrix.toolchain }}-${{ matrix.arch }}-unknown-linux-gnu-${{ hashFiles('**/Cargo.lock') }}

      # install toolchain when the cache is not available
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
      - if: steps.cache-cargo.outputs.cache-hit != 'true'
        name: "Setup toolchain"
        run: |
          rustup target add ${{ matrix.arch }}-unknown-linux-gnu
          rustup toolchain install --target=${{ matrix.arch }}-unknown-linux-gnu ${{ matrix.toolchain }}
          rustup component add --toolchain ${{ matrix.toolchain }} clippy llvm-tools-preview
          rustup component add llvm-tools-preview
          curl -OL https://github.com/mozilla/grcov/releases/download/v0.8.13/grcov-x86_64-unknown-linux-musl.tar.bz2
          tar xf grcov-x86_64-unknown-linux-musl.tar.bz2
          cp ./grcov ~/.cargo/bin/.

      # target-specific setup
      - if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu qemu-user-static
          echo "RUSTFLAGS=-C target-cpu=cortex-x2 -C instrument-coverage" >> $GITHUB_ENV
      - if: matrix.arch == 'x86_64'
        run: |
          echo "RUSTFLAGS=-C target-cpu=x86-64-v3 -C instrument-coverage" >> $GITHUB_ENV

      # run rustfmt
      - if: matrix.arch == 'x86_64' && matrix.toolchain == 'stable'
        run: |
          rustup component add rustfmt
          cargo fmt --all -- --check

      # run cargo clippy and cargo test on all confs
      - name: "Run cargo clippy -> cargo test"
        run: |
          export CARGO_INCREMENTAL=0
          export LLVM_PROFILE_FILE="cargo-test-%p-%m.profraw"
          rustup default ${{ matrix.toolchain }}
          cargo clippy --target ${{ matrix.arch }}-unknown-linux-gnu --no-deps -- -D warnings
          cargo test   --target ${{ matrix.arch }}-unknown-linux-gnu
          grcov . --binary-path ./target/${{ matrix.arch }}-unknown-linux-gnu/debug/deps/ -s . -t lcov --branch --ignore-not-existing --ignore "../*" --ignore "/*" -o ${{ matrix.arch }}-${{ matrix.toolchain }}.info

      # update coverage report for merge in the later step
      - if: matrix.toolchain == 'nightly'
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.arch }}-${{ matrix.toolchain }}-coverage-report
          path: ${{ matrix.arch }}-${{ matrix.toolchain }}.info

  merge-coverage-reports:
    needs: cargo-test-all
    runs-on: ubuntu-22.04
    steps:
      - name: "Setup PATH"
        run: echo "PATH=$HOME/.cargo/bin:$PATH" >> $GITHUB_ENV

      # checkout repository
      - uses: actions/checkout@v3

      # download all artifacts
      - uses: actions/download-artifact@v3
        with:
          name: aarch64-nightly-coverage-report
      - uses: actions/download-artifact@v3
        with:
          name: x86_64-nightly-coverage-report

      # restore grcov
      - uses: actions/cache@v3
        id: cache-grcov
        with:
          path: |
            ~/.cargo/bin/
          key: grcov

      # install exec-commands and check-links in ~/.cargo/bin when the cache is not available
      - if: steps.cache-grcov.outputs.cache-hit != 'true'
        name: "Install tools"
        run: |
          curl -OL https://github.com/mozilla/grcov/releases/download/v0.8.13/grcov-x86_64-unknown-linux-musl.tar.bz2
          tar xf grcov-x86_64-unknown-linux-musl.tar.bz2
          mkdir -p ~/.cargo/bin/ && cp ./grcov ~/.cargo/bin/.

      # merge coverage information
      - run: |
          grcov . -s . -t lcov --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o coverage.info
      - uses: codecov/codecov-action@v3
        with:
          files: coverage.info
